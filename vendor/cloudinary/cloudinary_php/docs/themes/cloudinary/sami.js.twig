{% from _self import element, add_to_search_index %}

window.projectVersion = '{{ project.version }}';

(function(root) {
    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '{{ element(tree, project.config('default_opened_level'), 0)|replace({"'": "\\'", "\n": ''})|raw }}';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
        {% block search_index %}
            {% from _self import add_to_search_index %}
            
            {% for ns in namespaces -%}
                {{ add_to_search_index('Namespace', ns, namespace_path(ns)) }},
            {%- endfor %}
            
            {% for class in interfaces -%}
                {{ add_to_search_index('Interface', class, class_path(class), class.namespace) }},
                {{ add_class_methods_index(class) }}
            {% endfor %}

            {% for class in classes -%}
                {{ add_to_search_index(class.isTrait ? 'Trait' : 'Class', class, class_path(class), class.namespace) }},
                {{ add_class_methods_index(class) }}
            {% endfor %}
            
            {% block search_index_extra '' %}
        {% endblock %}
        // Fix trailing commas in the index
        {}
    ];

    root.Sami = {
        cleanSearchTerm: function(term) {
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }
            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        search: function(term) {
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    {% block treejs %}
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        var expected = $('body').attr('data-name');
        if (expected) {
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }
    {% endblock %}

    {% verbatim %}
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });
    {% endverbatim %}
});

{% macro add_to_search_index(type, element, link, namespace=null) %}
    {"type": "{{ type }}", 
     {% if namespace %}"fromName": "{{ namespace|replace({'\\': '\\\\'})|raw }}", "fromLink": "{{ namespace_path(namespace)|raw }}",{% endif %}
     "link": "{{ link }}", 
     "name": "{{ element|replace({'\\': '\\\\'})|raw }}", 
     "doc": "{{ element.shortdesc|desc(element)|json_encode }}"}
{% endmacro %}

{% macro add_class_methods_index(class) %}
    {% if class.methods %}
        {% set from_name = class.name|replace({'\\': '\\\\'}) %}
        {% set from_link = class_path(class) %}
        {% for meth in class.methods %}
            {"type": "Method", "fromName": "{{ from_name|raw }}", "fromLink": "{{ from_link|raw }}", "link": "{{ method_path(meth) }}", "name": "{{ meth|replace({'\\': '\\\\'})|raw }}", "doc": "{{ meth.shortdesc|desc(class)|json_encode }}"},
        {% endfor %}
    {% endif %}
{% endmacro %}

{% macro element(tree, opened, depth) %}
    <ul>
        {%- for element in tree -%}
            {% if element[2] %}
                <li data-name="namespace:{{ element[1]|replace({'\\': '_'})|raw }}" {% if depth < opened %}class="opened"{% endif %}>
                    <div style="padding-left:{{ (depth * 18)|raw }}px" class="hd">
                        <span class="glyphicon glyphicon-play"></span>{% if not project.config('simulate_namespaces') %}<a href="{{ namespace_path(element[1]) }}">{% endif %}{{ element[0]|raw }}{% if not project.config('simulate_namespaces') %}</a>{% endif %}
                    </div>
                    <div class="bd">
                        {{ element(element[2], opened, depth + 1) -}}
                    </div>
                </li>
            {% else %}
                {% if (not (element[1].name ends with 'Trait')) and (not ('Base' in element[1].name)) and (not ('Interface' in element[1].name)) %}
                <li data-name="class:{{ (element[1].name)|replace({'\\': '_'}) }}" {% if depth < opened %}class="opened"{% endif %}>
                    <div style="padding-left:{{ 8 + (depth * 18) }}px" class="hd leaf">
                        <a href="{{ class_path(element[1]) }}">{{ element[0] }}</a>
                    </div>
                </li>
                {% endif %}
            {% endif %}
        {%- endfor %}
    </ul>
{% endmacro %}
